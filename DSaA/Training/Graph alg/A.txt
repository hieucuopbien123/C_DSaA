#include<bits/stdc++.h>
using namespace std;

vector<int> adj[100001];
vector<bool> isVisited(100001, false);
queue<int> Q;

void BFS(int u)//O(n + m)
{
    while(!Q.empty()){
        int u = Q.front();
        Q.pop();
        for(int i = 0; i < adj[u].size(); i++){
            int v = adj[u][i];
            if(!isVisited[v]){
                Q.push(v);
                isVisited[v] = true;
            }
        }
    }
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int numberOfVertexs, numberOfEdges;
    cin >> numberOfVertexs >> numberOfEdges;
    for(int i = 0; i < numberOfEdges; i++){
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    
    int numComps = 0;
    for(int i = 1; i < numberOfVertexs; i++){
        if(isVisited[i] == false){
            Q.push(i);
            isVisited[i] = true;
            BFS(i);
            numComps++;
        }
    }
    cout << numComps;
    
    return 0;
}
