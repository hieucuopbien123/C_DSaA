#include<bits/stdc++.h>
using namespace std;
vector<int> adj[2001];
bool check = false;

vector<bool> isVisited(2001, false);
queue<int> Q;
vector<int> test(2001, -1);

//BFS, DFS mỗi lần search sẽ search hết 1 connected components, mà undirected graph ta lưu cả 2 chiều nên k sợ
//1->2 xong 3->4 xong mới 2->3 làm ta kb hiện tại phải gán chẵn hay lẻ
void BFS(int start)
{
    Q.push(start);
    isVisited[start] = true;
    test[start] = 0;
    while(!Q.empty()){
        int u = Q.front();
        Q.pop();
        for(int i = 0; i < adj[u].size(); i++){
            int v = adj[u][i];
            if(!isVisited[v]){
                if(test[u] == 0){
                    test[v] = 1;
                }else if(test[u] == 1){
                    test[v] = 0;
                }
                Q.push(v);
                isVisited[v] = true;
            }else{
                if(test[u] == test[v]){
                    check = true;
                    return;
                }
            }
        }
    }
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int scenerios;
    cin >> scenerios;
    int numberOfBugs, numberOfInteractions;
    for(int k = 1; k <= scenerios; k++)
    {
        cin >> numberOfBugs >> numberOfInteractions;
        for(int i = 0; i < numberOfInteractions; i++){
            int a, b;
            cin >> a >> b;
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        
        for(int i = 1; i <= numberOfBugs; i++){
            if(isVisited[i] == false){
                BFS(i);
            }
            if(check == true){
                break;
            }
        }
        
        cout << "Scenario #" << k << ":" << endl;
        if(check == true){
            cout << "Suspicious bugs found!" << endl;
            check = false;
        }else{
            cout << "No suspicious bugs found!" << endl;
        }
        isVisited = vector<bool>(2001, false);
        for(int i = 1; i <= numberOfBugs; i++){
            adj[i].clear();
        }
        queue<int> empty;
        Q.swap(empty);
        test = vector<int>(2001, -1);
    }
    
    return 0;
}
