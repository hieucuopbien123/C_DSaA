#include <iostream>
#include <bits/stdc++.h>
using namespace std;

long long minValue(long long arr[], long long x, long long y) {
    if(x == -1)
        return y;
    if(y == -1)
        return x;
    return (arr[x] > arr[y]) ? y : x;
}

long long getMid(long long s, long long e) { 
    return s + (e - s)/2; 
}

long long constructSTUtil(long long arr[], long long ss, long long se, long long *st, long long si)
{
	if (ss == se){
		st[si] = ss;
		return ss;
	}
	long long mid = getMid(ss, se);
	st[si] = minValue(arr, constructSTUtil(arr, ss, mid, st, si*2 + 1), 
	        constructSTUtil(arr, mid + 1, se, st, si*2 + 2));
	return st[si];
}

long long *constructST(long long arr[], long long n)
{
	long long x = (long long)(ceil(log2(n)));
	long long max_size = 2*(long long)pow(2, x) - 1;
	long long *st = new long long[max_size];
    
	constructSTUtil(arr, 0, n-1, st, 0);
	return st;
}

long long getMinimumUtil(long long arr[], long long *st, long long ss, long long se, long long qs, long long qe, long long si)
{
	if (qs <= ss && qe >= se)
		return st[si];

	if (se < qs || ss > qe){//return giá trị gì mà loại bỏ được đi
		return -1;
	}
	
	long long mid = getMid(ss, se);
	return minValue(arr, getMinimumUtil(arr, st, ss, mid, qs, qe, 2*si + 1),
		    getMinimumUtil(arr, st, mid + 1, se, qs, qe, 2*si + 2));
}
long long getMinimum(long long arr[], long long *st, long long n, long long qs, long long qe)
{
	if (qs < 0 || qe > n - 1 || qs > qe)
	{
		cout << "Invalid Input";
		return -1;
	}

	return getMinimumUtil(arr, st, 0, n - 1, qs, qe, 0);
}

long long maxValue(long long x, long long y, long long z)
{
    if(x >= y && x >= z)
        return x;
    return (y > z) ? y : z;
}

long long getMaxAreaUtil(long long arr[], long long* st, long long n, long long from, long long to)
{
    if(from == to)
        return arr[from];
    if(from > to){
        return -1;
    }
    
    long long mid = getMinimum(arr, st, n, from, to);
    
    long long res = maxValue(getMaxAreaUtil(arr, st, n, from, mid - 1), 
                    getMaxAreaUtil(arr, st, n, mid + 1, to), (to - from + 1)*arr[mid]);
    return res;
}

long long getMaxArea(long long arr[], long long n)
{
    long long* st = constructST(arr, n);
    
    long long res = getMaxAreaUtil(arr, st, n, 0, n - 1);
    
    delete st;
    return res;
}

int main()
{
    long long n;
    cin >> n;
    while(n != 0){
        long long arr[n];
        for(long long i = 0; i < n; i++){
            cin >> arr[i];
        }
        cout << getMaxArea(arr, n) << "\n";
        
        cin >> n;
    }

    return 0;
}
